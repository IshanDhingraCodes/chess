// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  avatar         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  blocked        Boolean  @default(false)
  role           Role     @default(USER)
  gamesAsPlayer1 Game[]   @relation("Player1Games")
  gamesAsPlayer2 Game[]   @relation("Player2Games")
  wins           Game[]   @relation("WinnerGames")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model Game {
  id              String     @id @default(cuid())
  player1         User       @relation("Player1Games", fields: [player1Id], references: [id])
  player1Id       String
  player2         User       @relation("Player2Games", fields: [player2Id], references: [id])
  player2Id       String
  winner          User?      @relation("WinnerGames", fields: [winnerId], references: [id])
  winnerId        String?
  Move            Move[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  player1TimeLeft Int
  player2TimeLeft Int
  status          GameStatus @default(PLAYING)
}

enum GameStatus {
  PLAYING
  FINISHED
  DRAW
}

model Move {
  id        String   @id @default(uuid())
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  player    String
  from      String
  to        String
  piece     String
  timeTaken Int // in seconds
  createdAt DateTime @default(now())
}
